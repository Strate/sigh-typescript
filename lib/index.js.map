{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;sBAAc,QAAQ;;;;wBACF,UAAU;;;;wBACR,WAAW;;iCACP,sBAAsB;;AAEhD,SAAS,cAAc,CAAC,IAAI,EAAE;;;;;AAK5B,MAAI,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,CAAA;AAClC,MAAI,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;iBACd,OAAO,CAAC,MAAM,CAAC;;MAA3B,QAAQ,YAAR,QAAQ;;;AAGb,SAAO,UAAA,KAAK,EAAI;AACd,QAAI,GAAG,GAAG,EAAE,CAAC,eAAe,CAC1B,KAAK,CAAC,IAAI,EACV;AACE,qBAAe,EAAE;AACf,iBAAS,EAAE,IAAI;AACf,cAAM,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG;AACzB,cAAM,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG;AAC3B,WAAG,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ;OACzB;AACD,cAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;KAC/B,CACF,CAAA;;AAED,QAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;AACvC,OAAG,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;;AAEhC,WAAO;AACL,UAAI,EAAE,GAAG,CAAC,UAAU;AACpB,eAAS,EAAE,GAAG;KACf,CAAA;GACF,CAAA;CACF;;AAED,SAAS,UAAU,CAAC,QAAQ,EAAE;;AAE5B,SAAO,UAAA,KAAK,EAAI;AACd,QAAI,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;AACnD,aAAO,KAAK,CAAA;KACb;;AAED,QAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,IAAI,KAAK,CAAC,QAAQ,KAAK,KAAK,EAAE;AACvD,aAAO,KAAK,CAAA;KACb;;AAED,WAAO,QAAQ,CAAC,oBAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAiB,EAAK;UAArB,IAAI,GAAL,IAAiB,CAAhB,IAAI;UAAE,SAAS,GAAhB,IAAiB,CAAV,SAAS;;AACpH,WAAK,CAAC,IAAI,GAAG,IAAI,CAAA;;AAEjB,UAAI,SAAS,EAAE;AACb,aAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAAA;OAChC;;AAED,UAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,EAAE;AAC3B,aAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;OAC7B;;AAED,UAAI,KAAK,CAAC,QAAQ,KAAK,KAAK,EAAE;AAC5B,aAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAA;OAC9B;;AAED,aAAO,KAAK,CAAA;KACb,CAAC,CAAA;GACH,CAAA;CACF;;AAED,IAAI,UAAU,CAAA;;qBAEC,UAAS,EAAE,EAAa;MAAX,IAAI,yDAAG,EAAE;;AACnC,MAAI,CAAE,UAAU,EACd,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,EAAC,EAAE,IAAI,CAAC,EAAE,EAAE,MAAM,EAAN,MAAM,EAAE,CAAC,CAAA;;AAEzG,SAAO,kCAAU,EAAE,CAAC,MAAM,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC,CAAA;CACpD","file":"src/index.js","sourcesContent":["import _ from 'lodash'\nimport Promise from 'bluebird'\nimport { Bacon } from 'sigh-core'\nimport { mapEvents } from 'sigh-core/lib/stream'\n\nfunction typescriptTask(opts) {\n  // this function is called once for each subprocess in order to cache state,\n  // it is not a closure and does not have access to the surrounding state, use\n  // `require` to include any modules you need, for further info see\n  // https://github.com/ohjames/process-pool\n  var log = require('sigh-core').log\n  var ts = require('typescript');\n  let {basename} = require('path')\n\n  // this task runs inside the subprocess to transform each event\n  return event => {\n    var res = ts.transpileModule(\n      event.data,\n      {\n        compilerOptions: {\n          sourceMap: true,\n          module: ts.ModuleKind.ES6,\n          target: ts.ScriptTarget.ES6,\n          jsx: ts.JsxEmit.Preserve\n        },\n        fileName: basename(event.path)\n      }\n    )\n\n    var map = JSON.parse(res.sourceMapText)\n    map.sources = [event.sourcePath]\n\n    return {\n      data: res.outputText,\n      sourceMap: map\n    }\n  }\n}\n\nfunction adaptEvent(compiler) {\n  // data sent to/received from the subprocess has to be serialised/deserialised\n  return event => {\n    if (event.type !== 'add' && event.type !== 'change') {\n      return event\n    }\n\n    if (event.fileType !== 'ts' && event.fileType !== 'tsx') {\n      return event\n    }\n\n    return compiler(_.pick(event, 'type', 'data', 'path', 'projectPath', 'basePath', 'sourcePath')).then(({data, sourceMap}) => {\n      event.data = data\n\n      if (sourceMap) {\n        event.applySourceMap(sourceMap)\n      }\n\n      if (event.fileType === 'ts') {\n        event.changeFileSuffix('js')\n      }\n\n      if (event.fileType === 'tsx') {\n        event.changeFileSuffix('jsx')\n      }\n\n      return event\n    })\n  }\n}\n\nvar pooledProc\n\nexport default function(op, opts = {}) {\n  if (! pooledProc)\n    pooledProc = op.procPool.prepare(typescriptTask, Object.assign({cwd: process.cwd()}, opts), { module })\n\n  return mapEvents(op.stream, adaptEvent(pooledProc))\n}\n"]}